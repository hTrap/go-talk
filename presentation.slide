Golang Workshop
26 February 2016

Parth Oberoi
Faza Mahamood

* Powered By

.image doselect.png _ _


* Agenda

- Format: talk, exercise, talk, exercise ... (short QA in between)
- General facts
- Running a hello world
- Types
- Control structures
- Data structures
- Functions
- Interfaces
- Concurrency

* Facts

- General Purpose Programming Language
- Free/Open Source
- Created at Google by Robert Griesemer, Rob Pike and Ken Thompson
- Development started in 2007 and publicly released in November 2009
- C like syntax (no semicolons)
- Object Oriented (Composition over inheritance - no classes!)
- Compiled (Statically linked)
- Garbage collected
- Statically typed
- Strongly typed
- built-in concurrency

* Facts ...

- Two major compilers: gc & gccgo
- 25 keywords (less than C,C++,Python etc.)
- Classification (Capitalized are exported)
- Fast build
- Unused imports and variables raise compile error
- Operating Systems: Windows, GNU/Linux, Mac OS X, *BSD etc.
- CPU Architectures: amd64, 386, arm etc.
- Cross compilation
- Standard library
- No exceptions
- Pointers (No pointer arithmetic!)

* Hello, World!

.play code/hello.go

* Why Go ?

- Simplicity (Small spec, 25 keywords)
- Consistency
- Readability
- Safety (Type safety, Memory safety)
- Built-in concurrency features
- Speed

- [[http://commandcenter.blogspot.in/2012/06/less-is-exponentially-more.html][Less is exponentially more]] (Article by Robe Pike)

* Installing Go Compiler

- Download Go compiler binary from [[https://golang.org/dl]]
- Extract it into your home directory (`$HOME/go`)
- Create directory named `mygo` in your home directory (`$HOME/mygo`)
- Add the following lines to your `$HOME/.bashrc`


    export GOROOT=$HOME/go
    export PATH=$PATH:$GOROOT/bin

    export GOPATH=$HOME/mygo
    export PATH=$PATH:$GOPATH/bin

- [[https://golang.org/doc/install][https://golang.org/doc/install]]

* Building and Running

- You can run the program using "go run" command: go run hello.go
- You can also build (compile) and run the binary like this in GNU/Linux:

    go build hello.go
    ./hello

(The first command produce a binary and second command executes the binary)

- The "go build" command produce a binary file native to the operating system and the architecture of the CPU (i386, x86_64 etc.)

(*Exercise*: 1)

* Getting third party packages

- Use "go get" command to get packages

    go get github.com/htrap/lipsum

- To update use "-u" flag

    go get -u github.com/htrap/lipsum

* Primitive types

int, uint, int8, uint8, ...
bool, string
float32, float64
complex64, complex128

.play code/primitive1.go /START OMIT/,/END OMIT/

- [[https://golang.org/pkg/fmt]]

* Variables

- Type is explicitly specified but initialized with default zero values
- The zero value is 0 for numeric types, false for boolean type and empty string for strings.

.play code/variable1.go /START OMIT/,/END OMIT/

* Variables ...

- Type is explicitly specified and initialized with given values

.play code/variable2.go /START OMIT/,/END OMIT/

* Variables ...

- Type is inferred from the values that is given for initialization

.play code/variable3.go /START OMIT/,/END OMIT/

- Short variable declaration inside functions (Similar to above - type is inferred from the values that is given for initialization)

.play code/variable4.go /START OMIT/,/END OMIT/

* Constants

- Constants are declared like variables, but with the const keyword.
- Constants can be character, string, boolean, or numeric values.
- Constants cannot be declared using the := syntax.

    const Male = true
    const Pi = 3.14
    const Name = "Htrap"

- [[https://blog.golang.org/constants]]

* Go Types (Structs)

- A *struct* is a collection of fields.
- Struct fields are accessed using a dot.

.play code/struct1.go /START OMIT/,/END OMIT/


* Go Types (Slices and Arrays)


    []int, [3]string, []struct{ Name string }

- The type *[n]T* is an array of n values of type T
- An array's length is part of its type, so arrays cannot be resized.
- A slice points to an array of values and also includes a length.
- *[]T* is a slice with elements of type T
- *len(s)* returns the length of slice s
- Slices can contain any type, including other slices
- [[http://blog.golang.org/go-slices-usage-and-internals]]
- [[https://blog.golang.org/slices]]

* Go Types (Maps)

- A *map* maps keys to values
- Maps must be created with *make* before use
- the *nil* map is empty and cannot be assigned to

    map[string]int

- [[https://blog.golang.org/go-maps-in-action]]

* Go Types (Pointers)

    *int, *Person

* Go Types (Interface)

    type Geometry interface {
        Area() float64
        Perimeter() float64
    }

* Type declarations

type [name] [specification]

Example 1: Celsius is a _float64_ type

    type Celsius float64

Example 2: Person is a _struct_ type

    type Person struct {
        Name string
        Age  int
    }

* Function declarations

func [name] ([params]) [return value]
func [name] ([params]) ([return values])

A function to return sum of two _int_ values:

    func sum(a int, b int) int {
        return a + b
    }

* Function declarations ...

A function with multiple returned values:

    func div(a, b int) (int, int)
        return a / b, a % b
    }

* Function declarations ...

Made clearer by naming the return values:

    func div(den, div int) (q, rem int)
        return a / b, a % b
    }

* If Conditions

- Syntax inspired by C
- No parenthesis (not even optional)
- Curly brace is mandatory

.play code/if1.go /START OMIT/,/END OMIT/

* If Conditions ...

- The if statement can start with a short statement to execute before the condition
- Variables declared by the statement are only in scope until the end of the if
- Variables declared inside an if short statement are also available inside any of the else blocks

.play code/if2.go /START OMIT/,/END OMIT/

* Errors

- Go programs express error state with *error* values
- The error type is a built-in interface

    type error interface {
        Error() string
    }

- [[https://blog.golang.org/errors-are-values][Errors are values]]

* Errors ...

- Functions often return an error value, and calling code should handle errors by testing whether the error equals *nil*.

.play code/error1.go /START OMIT/,/END OMIT/

- A nil error denotes success; a non-nil error denotes failure.

* Command line arguments

- *os.Args* (slice) provides access to raw command-line arguments
- The arguments can be accessed using slice index syntax:

    os.Args[1]

- Go provides a *flag* package supporting basic command-line flag parsing

(*Exercise*: 2)

* Packages

- Every Go program is made up of packages
- Package name must be declared in source files
- To create executable use name of package as *main*
- Programs start running in package main

    package main

* Packages ...

- Import give access to exported stuff from other packages
- Any "unexported" names are not accessible from outside the package
- Foo is an exported name, as is FOO. The name foo is not exported
- By convention, package name is the same as the last element of the import path
- Initialization logic for package goes into a function named *init*
- Use alias to avoid package name ambiguity with package imports

    import (
    	   "fmt"

           myfmt "github.com/htrap/fmt"
    )

* Packages ...

- Use blank identifier (*_* - underscore) as import alias to invoke *init* function without using the package


    import (
           "database/sql"

           _ "github.com/lib/pq"
    )

* For Loop

- The only looping construct (no while loop)
- Syntax inspired by C
- No parenthesis (not even optional)
- Curly brace is mandatory

.play code/for1.go /START OMIT/,/END OMIT/

* For Loop ...

- Pre and post statements can be empty (and drop the semicolons!)

.play code/for2.go /START OMIT/,/END OMIT/

* For Loop ...

- An infinite loop can be created by removing the loop condition

.play code/for3.go /START OMIT/,/END OMIT/

(*Exercise*: 3)

* Range Loops

- The _range_ form of the _for_ loop iterates over a slice or map.

.play code/range1.go /START OMIT/,/END OMIT/

When ranging over a slice, two values are returned for each iteration.

- The first is the index, and the second is a copy of the element at that index.

* Range with Maps

.play code/range2.go /START OMIT/,/END OMIT/

* Nil slices

- The zero value of a slice is _nil_
- A _nil_ slice has a length and capacity of 0

.play code/slice1.go /START OMIT/,/END OMIT/

* Switch statement

- The cases are evaluated top to bottom until a match is found
- There is no automatic fall through
- Cases can be presented in comma-separated lists
- break statements can be used to terminate a switch early

* Switch statement ...

.play code/switch1.go /START OMIT/,/END OMIT/

* Switch statement ...

If the switch has no expression it switches on true (useful to write an if-else-if-else chain)

.play code/switch2.go /START OMIT/,/END OMIT/

* Method declaration

func ([receiver]) [name] ([params]) ([return values])

* Method declaration ...

A method on a struct:

    func (p Person) Major() bool {
        return p.Age >= 18
    }

* Method declaration ...

But also a method on a float64:

    func (c Celsius) Freezing() bool {
        return c <= 0
    }

* Method declaration ...

Constraint: Methods can be defined only on types declared in the same package.

    // This won't compile
    func (s string) Length() int { return len(s) }

(*Exercise*: 4)

* Pointers

Why pass by reference instead of pass by value?

- Modify the receiver ("read/write" vs "read")
- Very large struct and a deep copy is expensive
- Consistency: Let all methods have pointer receivers

* Pointers ...

Use `&` to obtain the address of a variable.

    a := "hello"
    p := &a

* Pointers ...

Use `*` to dereference the pointer.

    fmt.Print(*p + ", world")

* Pointers ...

No pointer arithmetic, no pointers to unsafe memory.

    a := "hello"
    p := &a
    p += 4  // no, you can't

* Pointers ...

- Control what you pass to functions.
- passing values, no side-effects:

    func double(x int) {
        x *= 2
    }

- passing pointers: side-effects possible:

    func double(x *int) {
        *x *= 2
    }

* Defer statement

- Ensure a cleanup function is called later
- To recover from runtime panic
- Executed in LIFO order

.play code/defer1.go /START OMIT/,/END OMIT/

* Interfaces

- Interfaces provide a way to specify the behavior of an object
- A type can implement multiple interfaces
- Named collections of method signatures

    type Geometry interface {
        Area() float64
        Perimeter() float64
    }

* Interfaces ...

- An interface type is defined by a set of methods
- A value of interface type can hold any value that implements those methods
- Interfaces are satisfied implicitly
- A type implements an interface by implementing the methods.

* Interfaces ...

.play code/interface1.go /START OMIT/,/END OMIT/

(*Exercise*: 5)

* Concurrency

- Goroutines are lightweight threads managed by the Go runtime
- Calling a function with _go_ keyword starts the goroutine

.play code/concurrency1.go /START OMIT/,/END OMIT/

- Goroutines can communicate to each other via channels (typed conduit)

* Concurrency ...

- You can send and receive values with the channel operator: <-

    ch <- v    // Send v to channel ch.
    v := <-ch  // Receive from ch, and
               // assign value to v.

- The data flows in the direction of the arrow.
- Channels must be created before use:

    ch := make(chan int)

- Sends and receives block until the other side is ready

* Concurrency ...

.play code/concurrency2.go /START OMIT/,/END OMIT/

(*Exercise*: 6)

* Concurrency ...

.play code/concurrency3.go /START OMIT/,/END OMIT/

* WaitGroup

- _sync.WaitGroup_ provides a goroutine synchronization mechanism in Golang
- A WaitGroup waits for a collection of goroutines to finish
- _sync.WaitGroup_ provides 3 methods: Add, Done and Wait.
- _Add_ method is used to identify how many goroutines need to be waited
- When a goroutine exits, it must call _Done_
- The main goroutine blocks on _Wait_

* WaitGroup ...

.play code/concurrency4.go /START OMIT/,/END OMIT/

(*Exercise*: 7)

* Go Tools

- build - compile packages and dependencies
- fmt - run gofmt on package sources
- get - download and install packages and dependencies
- install - compile and install packages and dependencies
- run - compile and run Go program
- test - test packages
- version - print Go version
- vet - run go tool vet on packages

* Who uses Go?

- Google
- Dropbox
- BBC
- Dailymotion
- Docker
- Disqus
- SoundCloud
- UserVoice
- [[https://github.com/golang/go/wiki/GoUsers][https://github.com/golang/go/wiki/GoUsers]]
- [[https://github.com/golang/go/wiki/SuccessStories][https://github.com/golang/go/wiki/SuccessStories]]

* Go Resources

- Use the word "golang" to search about Go in Google, Bing etc.
- Twitter hashtag #golang #GopherCon #GopherConIndia
- Official website: [[http://golang.org][http://golang.org]]
- Official blog: [[http://blog.golang.org][http://blog.golang.org]]
- Experiment and share Go source code: [[http://play.golang.org][http://play.golang.org]]
- [[https://gobyexample.com][https://gobyexample.com]]
- Forum/Mailing List: [[https://groups.google.com/forum/#!forum/golang-nuts][https://groups.google.com/forum/#!forum/golang-nuts]]
- Subreddit: [[http://www.reddit.com/r/golang][http://www.reddit.com/r/golang]]
- #go-nuts in the irc.freenode.org network
- Slack: [[https://gophersinvite.herokuapp.com/][https://gophersinvite.herokuapp.com/]]
- More: [[http://dave.cheney.net/resources-for-new-go-programmers][http://dave.cheney.net/resources-for-new-go-programmers]]

* Go Proverbs

Don't communicate by sharing memory, share memory by communicating.

Concurrency is not parallelism.

Channels orchestrate; mutexes serialize.

The bigger the interface, the weaker the abstraction.

Make the zero value useful.

interface{} says nothing.

Gofmt's style is no one's favorite, yet gofmt is everyone's favorite.

A little copying is better than a little dependency.

Syscall must always be guarded with build tags.

* Go Proverbs ...

Cgo must always be guarded with build tags.

Cgo is not Go.

With the unsafe package there are no guarantees.

Clear is better than clever.

Reflection is never clear.

Errors are values.

Don't just check errors, handle them gracefully.

Design the architecture, name the components, document the details.

Documentation is for users.

Don't panic.

* My Book: A Comprehensive Guide to Go Programming

Subscribe for sample chapters!

[[http://golang.muthukadan.net][http://golang.muthukadan.net]]

